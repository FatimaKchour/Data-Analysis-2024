import pandas as pd
from datetime import datetime, timedelta

# Load the provided CSV files
export_info = pd.read_csv('C:/Users/user/Desktop/PNRR/2024-05-03-11-58-15/exports/000/export_info.csv')
gaze_positions = pd.read_csv('C:/Users/user/Desktop/PNRR/2024-05-03-11-58-15/exports/000/gaze_positions.csv')
world_timestamps = pd.read_csv('C:/Users/user/Desktop/PNRR/2024-05-03-11-58-15/exports/000/world_timestamps.csv')

# Find the earliest timestamps in the gaze and world data
earliest_gaze_timestamp = gaze_positions['gaze_timestamp'].min()
earliest_world_timestamp = world_timestamps['# timestamps [seconds]'].min()

# Calculate the overall earliest timestamp
overall_earliest_timestamp = min(earliest_gaze_timestamp, earliest_world_timestamp)

# Given start date and time
known_start_datetime_str = '03.05.2024 11:58:00'
known_start_datetime = datetime.strptime(known_start_datetime_str, '%d.%m.%Y %H:%M:%S')

# Calculate the actual start datetime by adding the overall earliest timestamp to the known start datetime
actual_start_datetime = known_start_datetime + timedelta(seconds=overall_earliest_timestamp)
actual_start_unix_timestamp = actual_start_datetime.timestamp()

# Convert gaze timestamps to Unix timestamps using the new actual start time
gaze_positions['unix_timestamp_actual'] = gaze_positions['gaze_timestamp'] + actual_start_unix_timestamp

# Convert world timestamps to Unix timestamps using the new actual start time
world_timestamps['unix_timestamp_actual'] = world_timestamps['# timestamps [seconds]'] + actual_start_unix_timestamp

# Save the corrected gaze positions to a new CSV file
gaze_positions.to_csv('C:/Users/user/Desktop/PNRR/2024-05-03-11-58-15/exports/000/corrected_gaze_positions.csv', index=False)

# Save the corrected world timestamps to a new CSV file
world_timestamps.to_csv('C:/Users/user/Desktop/PNRR/2024-05-03-11-58-15/exports/000/corrected_world_timestamps.csv', index=False)
