import pandas as pd
import numpy as np

# Load the Excel file
file_path = 'YOUR_FILE_PATH.xlsx'  # Replace with the actual file path
df = pd.read_excel(file_path, sheet_name='Sheet1')

# Define the columns we are interested in
shape_columns = [col for col in df.columns if col.startswith('Shape_')]

# Initialize the new dataframe to include the new columns for average values
new_df = df.copy()

# Placeholder for new columns
new_columns = new_df.columns.tolist()

# Add new columns for the averages with a dtype of object to avoid dtype issues, and place them immediately after the corresponding shape columns
for col in shape_columns:
    new_col = f"Average_{col}"
    new_df[new_col] = np.nan
    new_df[new_col] = new_df[new_col].astype(object)
    # Find the position to insert the new column
    col_index = new_columns.index(col) + 1
    new_columns.insert(col_index, new_col)

# Reorder columns before filling data to avoid issues
new_df = new_df[new_columns]

# Iterate through each interval defined by TIMESTAMP_INITIAL and TIMESTAMP_FINAL
intervals = df[['TIMESTAMP_INITIAL', 'TIMESTAMP_FINAL']].drop_duplicates().reset_index(drop=True)

for index, row in intervals.iterrows():
    initial_timestamp = row['TIMESTAMP_INITIAL']
    final_timestamp = row['TIMESTAMP_FINAL']
    
    # Identify the rows within the current interval
    interval_mask = (df['TIMESTAMP'] >= initial_timestamp) & (df['TIMESTAMP'] <= final_timestamp)
    interval_indices = df[interval_mask].index
    
    # Calculate the averages for each shape column
    for col in shape_columns:
        average_value = df.loc[interval_indices, col].mean()
        if not interval_indices.empty:
            first_index = interval_indices[0]
            new_df.loc[first_index, f"Average_{col}"] = average_value
            new_df.loc[interval_indices[1:], f"Average_{col}"] = ""  # Fill subsequent rows with blank values

# Handling single-line values for GAZE_CLASS
for i in range(len(df)):
    if (i == 0 or df.loc[i, 'GAZE_CLASS'] != df.loc[i-1, 'GAZE_CLASS']) and (i == len(df)-1 or df.loc[i, 'GAZE_CLASS'] != df.loc[i+1, 'GAZE_CLASS']):
        for col in shape_columns:
            new_df.loc[i, f"Average_{col}"] = df.loc[i, col]

# Save the updated dataframe to a new Excel file
output_file_path = 'YOUR_OUTPUT_FILE_PATH.xlsx'  # Replace with the desired output file path
new_df.to_excel(output_file_path, index=False)

print("Task completed successfully.")
